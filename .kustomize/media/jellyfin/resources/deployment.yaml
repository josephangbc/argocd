apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: jellyfin
    app.kubernetes.io/name: jellyfin
  name: jellyfin
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: jellyfin
      app.kubernetes.io/name: jellyfin
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: jellyfin
        app.kubernetes.io/name: jellyfin
    spec:
      containers:
      - env:
        - name: TZ
          value: Asia/Singapore
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: UMASK
          value: "0022"
        image: lscr.io/linuxserver/jellyfin:latest
        imagePullPolicy: Always
        # livenessProbe:
        #   failureThreshold: 5
        #   httpGet:
        #     path: /
        #     port: 8096
        #     scheme: HTTP
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   successThreshold: 1
        #   timeoutSeconds: 5
        name: jellyfin
        ports:
        - containerPort: 8096
          name: main
          protocol: TCP
        # readinessProbe:
        #   failureThreshold: 5
        #   httpGet:
        #     path: /
        #     port: 8096
        #     scheme: HTTP
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   successThreshold: 2
        #   timeoutSeconds: 5
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
          requests:
            cpu: 1000m
            memory: 1000Mi
        # startupProbe:
        #   failureThreshold: 60
        #   initialDelaySeconds: 10
        #   periodSeconds: 5
        #   successThreshold: 1
        #   tcpSocket:
        #     port: 8096
        #   timeoutSeconds: 2
        volumeMounts:
        - mountPath: /config
          name: config
          subPath: config/jellyfin
        - name: data
          mountPath: /tv
          subPath: library/tv
        - name: data
          mountPath: /movies
          subPath: library/movies
        - name: data
          mountPath: /music
          subPath: library/music
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data
      - name: config
        persistentVolumeClaim:
          claimName: jellyfin-config-nfs
